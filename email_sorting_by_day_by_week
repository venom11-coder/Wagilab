from datetime import datetime, timedelta
import imaplib
import email
from email.utils import parsedate_to_datetime

# —————— Configuration ——————
IMAP_HOST = "imap.gmail.com"
IMAP_USER = "amansharma@wagilab.club"
IMAP_PASS = "UDCJFIUCDUNUFNSD"  # used the same pwd for the gmail account
# ————————————————————————

# to login the user
def connect_imap():
    mail = imaplib.IMAP4_SSL(IMAP_HOST)
    mail.login(IMAP_USER, IMAP_PASS)
    mail.select("INBOX")
    return mail


 # fetching mail ids for the messages in all category inside inbox
def fetch_message_ids(mail):
    status, data = mail.search(None, 'ALL')
    if status != 'OK':
        print(" Unable to fetch message IDs")
        return []
    return data[0].split()
  

# for emails by day
def get_emails_by_day(mail, message_ids, day, month, year):

    # target day
    target = datetime(year, month, day).date()
    emails = []

    # loops
    for num in message_ids:
        status, msg_data = mail.fetch(num, "(RFC822)")

        # if not the exact date
        if status != 'OK':
            continue
        msg = email.message_from_bytes(msg_data[0][1])
        try:
            msg_date = parsedate_to_datetime(msg["Date"]).date()
        except Exception:
            continue

        # if the same date then adds it to the list
        if msg_date == target:
            emails.append(msg)
    return emails


# emails by week uses timedelta class to get the specific date year and day for every iteration
def get_emails_by_week(mail, day, month, year):
    base_date   = datetime(year, month, day)
    message_ids = fetch_message_ids(mail)
    all_emails  = []
    for i in range(7):

        # iterates backwards
        d = base_date - timedelta(days=i)
        daily = get_emails_by_day(mail, message_ids, d.day, d.month, d.year)
        all_emails.extend(daily)
    return all_emails

# testing method generated by ai not working for the following credentials please try yours 
if __name__ == "__main__":
    imap_conn    = connect_imap()
    today        = datetime.now()
    emails_today = get_emails_by_day(imap_conn,
                                     fetch_message_ids(imap_conn),
                                     today.day, today.month, today.year)
    print(f"Emails on {today.date()}: {len(emails_today)}")

    emails_week  = get_emails_by_week(imap_conn,
                                      today.day, today.month, today.year)
    print(f" Emails in last 7 days: {len(emails_week)}")
